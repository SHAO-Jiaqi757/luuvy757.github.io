<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jiaqi&#39;s Blog</title>
  
  
  <link href="https://luuvy757.github.io/atom.xml" rel="self"/>
  
  <link href="https://luuvy757.github.io/"/>
  <updated>2022-03-27T08:20:51.749Z</updated>
  <id>https://luuvy757.github.io/</id>
  
  <author>
    <name>Jiaqi Shao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSC3150 Operating System</title>
    <link href="https://luuvy757.github.io/2022/03/25/CSC3150-Operating-System/"/>
    <id>https://luuvy757.github.io/2022/03/25/CSC3150-Operating-System/</id>
    <published>2022-03-24T16:24:13.000Z</published>
    <updated>2022-03-27T08:20:51.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Project-1-User-Thread-and-Kernel-Thread"><a href="#Project-1-User-Thread-and-Kernel-Thread" class="headerlink" title="Project 1: User Thread and Kernel Thread"></a>Project 1: User Thread and Kernel Thread</h1><p><a href="https://github.com/luuvy757/CSC3150_As1-Kernel-Mode-Multi-Process-Programming">https://github.com/luuvy757/CSC3150_As1-Kernel-Mode-Multi-Process-Programming</a></p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><blockquote><p>In computing, a loadable kernel module (LKM) is an object file that contains code to extend the running kernel, or so-called base kernel, of an operating system. LKMs are typically used to <strong>add support for new hardware (as device drivers) and/or filesystems, or for adding system calls</strong>. When the functionality provided by an LKM is no longer required, it can be unloaded in order to free memory and other resources.</p></blockquote><h2 id="Task-1-user-mode"><a href="#Task-1-user-mode" class="headerlink" title="Task 1: user mode"></a>Task 1: user mode</h2><div class="table-container"><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img src="/2022/03/25/CSC3150-Operating-System/user_mode.jpg" class=""></td><td><img src="/2022/03/25/CSC3150-Operating-System/signals.jpg" class=""></td></tr></tbody></table></div><h3 id="In-user-mode-fork-a-child-process-to-execute-the-test-program"><a href="#In-user-mode-fork-a-child-process-to-execute-the-test-program" class="headerlink" title="In user mode, fork a child process to execute the test program."></a>In user mode, fork a child process to execute the test program.</h3><p><code>pid = fork()</code>: <code>pid = -1 (failed); pid = 0 (child process); pid &gt; 0 (parent pid)</code><br><code>getpid()</code>: get process id.</p><h3 id="Detect-exception-cases-generated-by-test-programs"><a href="#Detect-exception-cases-generated-by-test-programs" class="headerlink" title="Detect exception cases generated by test programs"></a>Detect exception cases generated by test programs</h3><p><code>waitpid(pid, &amp;status, WUNTRACED);</code><br><code>status</code> is the identifier.</p><h2 id="Task-2-kernel-mode"><a href="#Task-2-kernel-mode" class="headerlink" title="Task 2: kernel mode"></a>Task 2: kernel mode</h2><img src="/2022/03/25/CSC3150-Operating-System/kernel_mode.jpg" class=""><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_exec</span><span class="params">(<span class="keyword">void</span>)</span> ... </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_wait</span><span class="params">(<span class="keyword">pid_t</span> pid)</span> ... </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_fork</span><span class="params">(<span class="keyword">void</span> *argc)</span> ...</span></span><br></pre></td></tr></table></figure><h3 id="Create-kernel-module"><a href="#Create-kernel-module" class="headerlink" title="Create kernel module"></a>Create kernel module</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">program2_init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">printk(<span class="string">&quot;[program2] : Module_init\n&quot;</span>);</span><br><span class="line"><span class="comment">/* write your code here */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">my_kthread</span>;</span></span><br><span class="line">printk(<span class="string">&quot;[program2] :module_init create kthread start&quot;</span>);</span><br><span class="line">    <span class="comment">/* create a kernel thread to run my_fork */</span></span><br><span class="line">my_kthread = kthread_create(&amp;my_fork, <span class="literal">NULL</span>, <span class="string">&quot;my_kthread&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!IS_ERR(my_kthread)) &#123;</span><br><span class="line">printk(<span class="string">&quot;[program2] : module_init kthread start&quot;</span>);</span><br><span class="line">wake_up_process(my_kthread);</span><br><span class="line">        <span class="comment">// wake_up_process() When the wake_up_process is called the function passed to kthread_create gets executed.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Firstly, create a kernel thread that forks a process <code>struct task_struct *my_kthread =kthread_create(&amp;my_fork, NULL, &quot;my_kthread&quot;);</code>, and start execution<br><code>wake_up_process(my_kthread);</code>.<br>In <code>my_fork()</code>, a child process is created by <code>_do_fork()</code> to execute test programs<br><code>_do_fork(SIGCHLD, (unsigned long) &amp;my_exec, 0, NULL, NULL, 0);</code> . Besides,<br>use <code>do_wait(&amp;wo)</code> to receive signal from the child process. After reveiving the signal, print out<br>the signal messages and child process terminated information. In <code>my_exec()</code>, use do_execve to<br>execute a file where raises signals.</p><h3 id="Insert-kernel-module-and-remove-kernel-module"><a href="#Insert-kernel-module-and-remove-kernel-module" class="headerlink" title="Insert kernel module and remove kernel module"></a>Insert kernel module and remove kernel module</h3><p><code>inmod &amp; rmmod</code> </p><hr><h1 id="Project-2-Frog-Game-using-pthread"><a href="#Project-2-Frog-Game-using-pthread" class="headerlink" title="Project 2: Frog Game (using pthread)"></a>Project 2: Frog Game (using pthread)</h1><blockquote><p><strong>thread</strong>:<br>A process can have multiple threads. The threads share the resources within a process and they<br>execute within the same address space. The shared resources can be accessed by all the threads, so that the<br>threads can write and read the shared resources. Therefore, it is significant to make explicit synchronization by<br>the programmer.<br><strong>critical section</strong>: The critical section is a code segment where the shared variables can be accessed. An atomic action is required in a critical section i.e. only one process can execute in its critical section at a time. All the other processes have to wait to execute in their critical sections.<br><strong>mutex</strong>: a data structure</p></blockquote><h2 id="Mutex-Lock"><a href="#Mutex-Lock" class="headerlink" title="Mutex Lock"></a>Mutex Lock</h2><ul><li><p><code>print_map()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_map</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[H\033[2J&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= ROW; i++)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="built_in">map</span>[i]);</span><br><span class="line">    usleep(<span class="number">1e4</span>);</span><br><span class="line">    pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The shared data map is accessed by the <code>print_map()</code> in the <code>frog_control</code> thread. However, in the<br><code>logs_move()</code> of logs control threads, the shared data map is changed. To avoid the conflicts, the<br>mutex is required to make a critical section in the <code>print_map()</code>.</p></li><li><p><code>frog_control()</code></p><p>  The shared data frog is changed when the player controlling it. However, in the <code>logs_move()</code> of logs<br>  control threads, the frog is changed as it moving along with the log. Thus, to avoid the conflicts, the<br>  mutex is required to make a critical section in the <code>frog_control()</code>.</p></li></ul><hr><h1 id="Project-3-Virtual-Memory-Simulation"><a href="#Project-3-Virtual-Memory-Simulation" class="headerlink" title="Project 3: Virtual Memory Simulation"></a>Project 3: Virtual Memory Simulation</h1><p><a href="https://github.com/luuvy757/CSC3150-As3-Vitrual-Memory-Simulation">https://github.com/luuvy757/CSC3150-As3-Vitrual-Memory-Simulation</a></p><h2 id="Overview-1"><a href="#Overview-1" class="headerlink" title="Overview"></a>Overview</h2><p>  The virtual memory is efficient to execute partially-loaded program, so that the program is free of physical memory limited space. The virtual address is generated by the CPU, and after loading, the physical address is bound. The virtual memory space can be divided into pages, and the physical memory space can be divided into frames of the same size. If there is a reference to a page, OS needs to check the page table to find out its physical page number or it is not in memory, where the page fault may occur. The virtual memory management is significant in mapping virtual memory to physical memory, and load data from disk into physical memory only when necessary.<br>  <img src="/2022/03/25/CSC3150-Operating-System/GPU.jpg" class="" title="Figure 1.1"><br>  In this project, we aim to simulate a virtual memory management in GPU, and the Fig.1.1 shows how the memory arrangement in the GPU. Moreover, I used Inverted Page Table(IPT) in this project, and LRU is implemented for swapping out when page faults.<br><img src="/2022/03/25/CSC3150-Operating-System/vm_read.png" class=""></p><h2 id="Transform-Virtual-address-to-Physical-address"><a href="#Transform-Virtual-address-to-Physical-address" class="headerlink" title="Transform Virtual address to Physical address"></a>Transform Virtual address to Physical address</h2><ul><li>In this project, <strong>virtual memory space</strong> and <strong>disk memory space</strong> is one-to-one mapping.</li></ul><ol><li>Given virtual address, we can get page number, and page offset. </li><li>Linearly search Invert Page Table<br>(a) exist =&gt; frame number = current index;<br>(b) not exist =&gt; page fault =&gt; handle page fault =&gt; get frame number</li><li>Physical address = frame number*page_size + page offset</li><li>Don’t forget to update LRU set!<h2 id="Page-Fault-Handling"><a href="#Page-Fault-Handling" class="headerlink" title="Page Fault Handling"></a>Page Fault Handling</h2></li></ol><ul><li>LRU set contains all occupied frames.</li><li>Target: Find frame and put virtual page into physical frame.</li></ul><ol><li>Check if there is a free frame<br>(a) Yes, return free frame.<br>(b) No, LRU =&gt; swap out and return LRU frame </li><li>Swap virtual page into physical frame. (virtual address and disk address is one-to-one mapping)</li></ol><h2 id="Invert-Page-Table"><a href="#Invert-Page-Table" class="headerlink" title="Invert Page Table"></a>Invert Page Table</h2><ul><li>#entries = $\frac{physicalMemorySize (32KB)}{frame Size (32B)} = 2^{10} = 1024$ </li><li><em>frame number-&gt; page number</em> </li><li><strong>Linear search</strong> to find whether page number is already in physical memory.</li><li>Why Linear Search? For Table in the structure of <code>page number -&gt; frame number</code>, we can access index(page number) to check the frame number is valid or not.</li></ul><h2 id="Page-Replacement-LRU"><a href="#Page-Replacement-LRU" class="headerlink" title="Page Replacement (LRU)"></a>Page Replacement (LRU)</h2><ul><li>data structure<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  u16 prev;</span><br><span class="line">  u16 next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LRU</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Node* head;  <span class="comment">//nodes[0] (sentinel)</span></span><br><span class="line">  Node* tail;  <span class="comment">//nodes[1025] (sentinel)</span></span><br><span class="line">  Node* nodes;</span><br><span class="line"></span><br><span class="line">  u16 count = <span class="number">0</span>;  </span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>k = nodes[i].prev: (i-1)th frame’s prev is (k-1)th frame.</li><li>k = nodes[i].next: (i-1)th frame’s next is (k-1)th frame.</li><li>ith frame is free &lt;=&gt; nodes[i+1].prev is <code>null</code></li><li>LRU frame number= <code>LRU-&gt;tail.prev - 1</code></li><li>update LRU: <ul><li>(a) There is a free frame: add this free frame number into LRU (doubly-link-list, add operation at <code>head</code>) </li><li>(b) Physical memory is full: return the LRU frame. -&gt; delete operation &amp; add operation</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*virtual_memory.h*/</span></span><br><span class="line"><span class="function">__device__ <span class="keyword">void</span> <span class="title">update_LRU</span><span class="params">(VirtualMemory* vm, u16 frame_number)</span></span>;</span><br><span class="line"><span class="function">__device__ u16 <span class="title">get_LRU_frame_number</span><span class="params">(VirtualMemory* vm)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*virtual_memory.cu*/</span></span><br><span class="line"><span class="function">__device__ <span class="keyword">void</span> <span class="title">init_LRU</span><span class="params">(VirtualMemory *vm)</span></span>;</span><br><span class="line"><span class="function">__device__ <span class="keyword">void</span> <span class="title">add_to_LRU</span><span class="params">(VirtualMemory *vm, u16 frame_number)</span></span>;</span><br><span class="line"><span class="function">__device__ <span class="keyword">void</span> <span class="title">update_LRU</span><span class="params">(VirtualMemory *vm, u16 frame_number)</span></span>;</span><br><span class="line"><span class="function">__device__ u16 <span class="title">get_LRU_frame_number</span><span class="params">(VirtualMemory *vm)</span></span></span><br></pre></td></tr></table></figure><p><code>init_LRU</code> is used to initialize the LRU–putting the LRU into the virtual memory. \<br><code>add_to_LRU</code> is used to add node in the front of the doubly linked list. \<br><code>update_LRU</code> is used to update the LRU once a frame is accessed. \<br><code>get_LRU_frame_number</code> is used to get the <em>least recently unused</em> <code>frame_number</code>, which will be swapped out later.</p><hr><h1 id="Project-4-File-System-Simulation"><a href="#Project-4-File-System-Simulation" class="headerlink" title="Project 4: File System Simulation"></a>Project 4: File System Simulation</h1><h2 id="Overview-2"><a href="#Overview-2" class="headerlink" title="Overview"></a>Overview</h2><p><a href="https://github.com/luuvy757/CSC3150-As4-File-System">https://github.com/luuvy757/CSC3150-As4-File-System</a></p><ul><li>Layered File System<img src="/2022/03/25/CSC3150-Operating-System/layered_fs.png" class=""></li><li>Volume Control Block: total # of blocks, # of free blocks… </li><li>File Control Block: file size, time, filename…<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><h3 id="Data-structure"><a href="#Data-structure" class="headerlink" title="Data structure"></a>Data structure</h3></li></ul><ol><li>Super Block<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SuperBlock</span></span></span><br><span class="line"><span class="class"> &#123;</span></span><br><span class="line">     <span class="keyword">int</span> free_block_count; <span class="comment">// how many free block</span></span><br><span class="line">     u16 free_block_start; <span class="comment">// the first start free block number;</span></span><br><span class="line">     <span class="keyword">int</span> total_file = <span class="number">0</span>;   <span class="comment">// how many files in the storge</span></span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></li><li><p>File Control Block  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(1)</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">FCB</span></span></span><br><span class="line"><span class="class"> &#123;</span></span><br><span class="line">     u32 modified_time; <span class="comment">// 4 bytes</span></span><br><span class="line">     u32 create_time;   <span class="comment">// 4 bytes</span></span><br><span class="line">     u16 file_size;     <span class="comment">// 2 bytes</span></span><br><span class="line">     u16 start_block;</span><br><span class="line">     <span class="keyword">char</span> filename[<span class="number">20</span>];</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="meta">#<span class="meta-keyword">pragma</span> pack()</span></span><br></pre></td></tr></table></figure><p>Declaration in the File System: </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SuperBlock *superBlock_ptr;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FCB</span> *<span class="title">FCB_arr</span>;</span></span><br><span class="line">uchar *fileContent_ptr;</span><br></pre></td></tr></table></figure><h2 id="APIs"><a href="#APIs" class="headerlink" title="APIs"></a>APIs</h2><h3 id="fs-open-fs-name-G-READ-G-WRITE"><a href="#fs-open-fs-name-G-READ-G-WRITE" class="headerlink" title="fs_open(fs, name, G_READ/G_WRITE)"></a><code>fs_open(fs, name, G_READ/G_WRITE)</code></h3><img src="/2022/03/25/CSC3150-Operating-System/fs_open.png" class=""><h3 id="fs-write-fs-input-size-fp"><a href="#fs-write-fs-input-size-fp" class="headerlink" title="fs_write(fs, input, size, fp)"></a><code>fs_write(fs, input, size, fp)</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (u32 i = start_addr; i &lt; start_addr + size; i++)</span><br><span class="line">&#123;</span><br><span class="line">    fs-&gt;fileContent_ptr[i] = input[i - start_addr];</span><br><span class="line">&#125; <span class="comment">// write to File Content from input buffer.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// update FCB_arr</span></span><br><span class="line">fs-&gt;FCB_arr[fp].file_size = size;</span><br><span class="line">fs-&gt;FCB_arr[fp].modified_time = gtime++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// update superBlock_ptr</span></span><br><span class="line"><span class="keyword">int</span> delta_block = block_needs - origin_blocks;</span><br><span class="line">fs-&gt;superBlock_ptr-&gt;free_block_count -= delta_block;</span><br><span class="line">fs-&gt;superBlock_ptr-&gt;free_block_start += delta_block;</span><br></pre></td></tr></table></figure></li></ol><h3 id="fs-read-fs-output-size-fp"><a href="#fs-read-fs-output-size-fp" class="headerlink" title="fs_read(fs, output, size, fp)"></a><code>fs_read(fs, output, size, fp)</code></h3><ul><li><p>fp =&gt; get <code>start_block</code> and <code>file_size</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u16 start_block = fs-&gt;FCB_ar[fp].start_block;</span><br><span class="line">u16 file_size = fs-&gt;FCB_arr[fp].file_size;</span><br></pre></td></tr></table></figure></li><li>Get physical start address and end address<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u32 start_addr = start_block * fs-&gt;STORAGE_BLOCK_SIZE;</span><br><span class="line">u32 end_addr = start_addr + size;</span><br></pre></td></tr></table></figure></li><li>Read from File Content, and put result to <code>output</code> buffer.</li></ul><h3 id="fs-gsys-fs-RM-name"><a href="#fs-gsys-fs-RM-name" class="headerlink" title="fs_gsys(fs,RM, name)"></a><code>fs_gsys(fs,RM, name)</code></h3><img src="/2022/03/25/CSC3150-Operating-System/fs_remove.png" class=""><h3 id="fs-gsys-LS-D-LS-S"><a href="#fs-gsys-LS-D-LS-S" class="headerlink" title="fs_gsys (LS_D / LS_S)"></a><code>fs_gsys (LS_D / LS_S)</code></h3><ul><li>Use Bubble Sort </li><li>LS_D:LS_D list all files name in the directory and order by modified time of files, least modified, first print. </li><li>LS_S: list all files name and size in the directory and order by descending size. If there are several files with the same size, then first create first print. </li></ul><p>————Bonus—————</p><h3 id="fs-open-fs-name-G-READ-G-WRITE-1"><a href="#fs-open-fs-name-G-READ-G-WRITE-1" class="headerlink" title="fs_open(fs, name, G_READ/G_WRITE)"></a><code>fs_open(fs, name, G_READ/G_WRITE)</code></h3><ul><li>update: when create a new file, modify the current directory’s <code>file_size</code> and <code>modified_time</code>;</li><li>update: when remove a file, modify the current directory’s <code>file_size</code>;</li></ul><h3 id="fs-gsys-fs-MKDIR-name"><a href="#fs-gsys-fs-MKDIR-name" class="headerlink" title="fs_gsys(fs, MKDIR, name)"></a><code>fs_gsys(fs, MKDIR, name)</code></h3><ul><li>Similar with create an empty file in <code>fs_open</code></li></ul><h3 id="fs-gsys-fs-CD-name"><a href="#fs-gsys-fs-CD-name" class="headerlink" title="fs_gsys(fs,CD,name)"></a><code>fs_gsys(fs,CD,name)</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fp = linear search to get FCB index by name;</span><br><span class="line">fs-&gt;curr_dir = fp; <span class="comment">// update the current directory;</span></span><br></pre></td></tr></table></figure><h3 id="fs-gsys-fs-CD-P"><a href="#fs-gsys-fs-CD-P" class="headerlink" title="fs_gsys(fs,CD_P)"></a><code>fs_gsys(fs,CD_P)</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// change to the parent directory of the current directory;</span></span><br><span class="line">fs-&gt;curr_dir = fs-&gt;FCB_arr[fs-&gt;curr_dir].parent;</span><br></pre></td></tr></table></figure><h3 id="fs-gsys-fs-RM-RF-name"><a href="#fs-gsys-fs-RM-RF-name" class="headerlink" title="fs_gsys(fs,RM_RF,name)"></a><code>fs_gsys(fs,RM_RF,name)</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// recursive_remove_dir(fs, fp);</span></span><br><span class="line"><span class="keyword">if</span> (directory fp is empty) remove the empty directory fp;</span><br><span class="line"><span class="keyword">for</span> (i in range of total files number) &#123;</span><br><span class="line">    <span class="keyword">if</span> file i is a file &#123;</span><br><span class="line">        remove file i;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file i is a directory) &#123;</span><br><span class="line">        <span class="built_in">recursive_remove_dir</span>(fs, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">remove empty directory fp;</span><br></pre></td></tr></table></figure><h3 id="fs-gsys-fs-PWD"><a href="#fs-gsys-fs-PWD" class="headerlink" title="fs_gsys(fs, PWD)"></a><code>fs_gsys(fs, PWD)</code></h3><ul><li>Back track the parent directory until reach to the root directory. Print out the current path.</li></ul><h3 id="fs-gsy-fs-LS-D-LS-S"><a href="#fs-gsy-fs-LS-D-LS-S" class="headerlink" title="fs_gsy(fs, LS_D\LS_S)"></a><code>fs_gsy(fs, LS_D\LS_S)</code></h3><h2 id="update-list-the-files-as-well-as-directories-For-a-file-list-it-name-with-size-only-For-a-directory-add-an-symbol-‘d’-at-the-end"><a href="#update-list-the-files-as-well-as-directories-For-a-file-list-it-name-with-size-only-For-a-directory-add-an-symbol-‘d’-at-the-end" class="headerlink" title="   * update: list the files as well as directories. For a file, list it name (with size) only. For a directory, add an symbol ‘d’ at the end."></a>   * update: list the files as well as directories. For a file, list it name (with size) only. For a directory, add an symbol ‘d’ at the end.</h2><h1 id="Project-5-Control-Device-in-Kernel-Module"><a href="#Project-5-Control-Device-in-Kernel-Module" class="headerlink" title="Project 5: Control Device in Kernel Module"></a>Project 5: Control Device in Kernel Module</h1><img src="/2022/03/25/CSC3150-Operating-System/dma.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Project-1-User-Thread-and-Kernel-Thread&quot;&gt;&lt;a href=&quot;#Project-1-User-Thread-and-Kernel-Thread&quot; class=&quot;headerlink&quot; title=&quot;Project 1: Use</summary>
      
    
    
    
    <category term="course" scheme="https://luuvy757.github.io/categories/course/"/>
    
    
  </entry>
  
  <entry>
    <title>CSC3050 Computer Architecture</title>
    <link href="https://luuvy757.github.io/2022/03/22/CSC3050-Computer-Architecture/"/>
    <id>https://luuvy757.github.io/2022/03/22/CSC3050-Computer-Architecture/</id>
    <published>2022-03-22T05:59:55.000Z</published>
    <updated>2022-03-27T07:07:53.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Project-1-MIPS-assembler-simulator"><a href="#Project-1-MIPS-assembler-simulator" class="headerlink" title="Project 1: MIPS: assembler, simulator."></a>Project 1: MIPS: assembler, simulator.</h1><blockquote><p>Assembler: translate MIPS code to machine code. </p><p>Simulator: execute machine code.</p></blockquote><h2 id="Generic-method"><a href="#Generic-method" class="headerlink" title="Generic method"></a>Generic method</h2><ol><li>Read .asm data and put data into static data segment</li><li>Read .asm text and use assembler to translate them into machine code, then put them into text segment</li><li>Initialize <code>pc = 0x40000000</code>, fetch instructions in text segment which incrementing <code>pc</code>.</li></ol><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem:"></a>Problem:</h2><ol><li>How to put data/text into memory?<br> A: map virtual memory to real memory. </li><li>How to put data with different data type (char, byte, word, half)?<br> A: mapMem -&gt; <em>char, cast `</em>char <code>into</code><em>uint_16_t (half) </em>uint_32_t(word)`. </li><li>How to map <code>labels</code>?<br> A: when reading <code>.asm</code> file, using map data structure to map <code>label</code> and corresponding relative address.</li><li>Jump/Branch?<br>A: Jump <code>j label/address</code>, if label, label-&gt;relative address &gt;&gt; 2, then PC || address||00;<br>Branch <code>bne $s1 $s0 label/offset</code>, label -&gt; relative address =  pc+offset*4 + 4 =&gt; offset; then branch to PC + offset*4 + 4;</li></ol><h1 id="Project-2-ALU-Verilog"><a href="#Project-2-ALU-Verilog" class="headerlink" title="Project 2: ALU Verilog"></a>Project 2: ALU Verilog</h1><blockquote><p>ALU(regA, regB, instruction\control, result, flag(Z,O,N))</p></blockquote><h2 id="Generic-method-1"><a href="#Generic-method-1" class="headerlink" title="Generic method"></a>Generic method</h2><ul><li>Instruction decode =&gt; op code (R type always 0), func code</li><li>ALU module (<strong>always block</strong> with sensitive list)</li><li>Test bench (<strong>initial block</strong> for simulation purpose, delay 10ns for propagation delay)</li><li><code>always block</code> and <code>initial block</code> are independent processes </li></ul><img src="/2022/03/22/CSC3050-Computer-Architecture/verilog_initial_block.png" class=""><h1 id="Project-3-Pipelined-CPU-with-Verilog"><a href="#Project-3-Pipelined-CPU-with-Verilog" class="headerlink" title="Project 3: Pipelined CPU with Verilog"></a>Project 3: Pipelined CPU with Verilog</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><img src="/2022/03/22/CSC3050-Computer-Architecture/datapath_diagram.jpg" class=""><img src="/2022/03/22/CSC3050-Computer-Architecture/mainController.jpg" class=""><h2 id="Generic-method-2"><a href="#Generic-method-2" class="headerlink" title="Generic method"></a>Generic method</h2><h3 id="Data-Path"><a href="#Data-Path" class="headerlink" title="Data Path"></a>Data Path</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">PipelinednDatapath</span></span><br><span class="line"><span class="comment">IF -&gt; ID -&gt; EXE -&gt; MEM -&gt; WB</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">module</span> datapath#(</span><br><span class="line"><span class="keyword">parameter</span> DATA_WIDTH = <span class="number">32</span>,</span><br><span class="line"><span class="keyword">parameter</span> ADDR_WIDTH = <span class="number">5</span></span><br><span class="line">)(</span><br><span class="line"><span class="keyword">input</span> clk,</span><br><span class="line"><span class="keyword">input</span> rst,</span><br><span class="line"><span class="keyword">input</span> en_n</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Main-Controller"><a href="#Main-Controller" class="headerlink" title="Main Controller"></a>Main Controller</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> controlUnit (</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">5</span>:<span class="number">0</span>] op,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">5</span>:<span class="number">0</span>] funct,</span><br><span class="line">    <span class="keyword">output</span>  Jump,</span><br><span class="line">    <span class="keyword">output</span>  RegWrite,  <span class="comment">// control register file -- 1 for write;</span></span><br><span class="line">    <span class="keyword">output</span>  MemtoReg,  <span class="comment">// 1 for data from mem, 0 for data from ALU output</span></span><br><span class="line">    <span class="keyword">output</span>  MemRead,  <span class="comment">// control data memory</span></span><br><span class="line">    <span class="comment">// output  MemWrite,  // control data memory</span></span><br><span class="line">    <span class="keyword">output</span>  BranchBNE,  <span class="comment">// for bne and beq;</span></span><br><span class="line">    <span class="keyword">output</span>  BranchBEQ,</span><br><span class="line">    <span class="keyword">output</span>  ALUSrc, <span class="comment">// 0 for regInput, 1 for immediate input</span></span><br><span class="line">    <span class="keyword">output</span>  [<span class="number">1</span>:<span class="number">0</span>] RegDst,  <span class="comment">// 0 for rt, 1 for rd (R type), 2 for reg31 (jal)</span></span><br><span class="line">    <span class="keyword">output</span>  isSigned,</span><br><span class="line">    <span class="keyword">output</span>  JumpRegID,  <span class="comment">// for jr: jump to address stored in a register</span></span><br><span class="line">    <span class="keyword">output</span>  RegWriteSrc, <span class="comment">// 0: data from DMEM; 1: PC + 4;</span></span><br><span class="line">    <span class="keyword">output</span>  [<span class="number">2</span>:<span class="number">0</span>] ALUop  <span class="comment">// input to ALU control unit</span></span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="ALU-controller"><a href="#ALU-controller" class="headerlink" title="ALU controller"></a>ALU controller</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> ALUcontrol (</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] ALUop,  <span class="comment">// from the main controller</span></span><br><span class="line">    <span class="keyword">input</span> [<span class="number">5</span>:<span class="number">0</span>] funct,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">3</span>:<span class="number">0</span>] control,</span><br><span class="line"><span class="keyword">output</span> jump_signal</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="ALU"><a href="#ALU" class="headerlink" title="ALU"></a>ALU</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> alu #(</span><br><span class="line">    <span class="keyword">parameter</span> DELAY = <span class="number">0</span></span><br><span class="line">)(</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> rst,</span><br><span class="line">    <span class="keyword">input</span> enable,  <span class="comment">// for delay enable, active high</span></span><br><span class="line">    <span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>] control,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] A,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] B,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] shamt,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">31</span>: <span class="number">0</span>] result,</span><br><span class="line">    <span class="keyword">output</span> Zero,</span><br><span class="line">    <span class="keyword">output</span> Overflow,</span><br><span class="line">    <span class="keyword">output</span> Signbit,</span><br><span class="line">    <span class="keyword">output</span> Carrybit</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Register-File"><a href="#Register-File" class="headerlink" title="Register File"></a>Register File</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> RegisterFile (</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> rst,</span><br><span class="line">    <span class="keyword">input</span> RegWrite,  <span class="comment">// register write signal</span></span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] readReg1,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] readReg2,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] writeReg,   <span class="comment">// indicating which the register to write to.</span></span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] writeData,  </span><br><span class="line">    <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] readData1,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] readData2</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Data-Memory"><a href="#Data-Memory" class="headerlink" title="Data Memory"></a>Data Memory</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> MainMemory</span><br><span class="line">    ( <span class="comment">// Inputs</span></span><br><span class="line">      <span class="keyword">input</span>  CLOCK <span class="comment">// clock</span></span><br><span class="line">    , <span class="keyword">input</span>  RESET <span class="comment">// reset</span></span><br><span class="line">    , <span class="keyword">input</span>  MEMWRITE <span class="comment">// write signal</span></span><br><span class="line">    , <span class="keyword">input</span>  MEMREAD <span class="comment">// read signal</span></span><br><span class="line">    , <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] ADDRESS</span><br><span class="line">    , <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] WRITE_DATA <span class="comment">// write data</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Outputs</span></span><br><span class="line">    , <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] READDATA  <span class="comment">// output readData</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h3 id="sign-extender"><a href="#sign-extender" class="headerlink" title="sign extender"></a>sign extender</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> signextender #(</span><br><span class="line"><span class="keyword">parameter</span> DELAY = <span class="number">0</span></span><br><span class="line">)(</span><br><span class="line"><span class="keyword">input</span> [<span class="number">15</span>:<span class="number">0</span>] dataIn,</span><br><span class="line"><span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] dataOut,</span><br><span class="line"><span class="keyword">input</span> isSigned,  <span class="comment">// extend 1 or 0;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Delay Inputs</span></span><br><span class="line"><span class="keyword">input</span> clk,</span><br><span class="line"><span class="keyword">input</span> rst,</span><br><span class="line"><span class="keyword">input</span> en</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="mux"><a href="#mux" class="headerlink" title="mux"></a>mux</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** ---MUX---- **/</span></span><br><span class="line"><span class="comment">// n inputs to 1 output</span></span><br><span class="line"><span class="comment">// the inputs is depended on the select signal</span></span><br><span class="line"><span class="keyword">module</span> MUX #(</span><br><span class="line"><span class="keyword">parameter</span> DATA_INPUT_WIDTH = <span class="number">5</span>,  <span class="comment">// the input data width</span></span><br><span class="line"><span class="keyword">parameter</span> DATA_INPUT_NUM= <span class="number">2</span>,  <span class="comment">// the number of input data</span></span><br><span class="line"><span class="keyword">parameter</span> SEL_BIT_WIDTH = <span class="number">1</span>  <span class="comment">// the input signal data width, if there is n input datas, the select input data width is log2(n) bits.</span></span><br><span class="line">)(</span><br><span class="line"><span class="keyword">input</span> [DATA_INPUT_WIDTH*DATA_INPUT_NUM- <span class="number">1</span>:<span class="number">0</span>] dataIn,  <span class="comment">// n inputs packed into an array</span></span><br><span class="line"><span class="keyword">input</span> [SEL_BIT_WIDTH - <span class="number">1</span>:<span class="number">0</span>] sel,  </span><br><span class="line"><span class="keyword">output</span> [DATA_INPUT_WIDTH - <span class="number">1</span>:<span class="number">0</span>] dataOut</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="pipe-register"><a href="#pipe-register" class="headerlink" title="pipe register"></a>pipe register</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* delay</span></span><br><span class="line"><span class="comment"> * This creates an array or vector registers of generic bitwidth, array width, and pipeline depth. </span></span><br><span class="line"><span class="comment"> *  Pipe shifts makes delay</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> delay #(</span><br><span class="line"><span class="keyword">parameter</span> BIT_WIDTH = <span class="number">32</span>,</span><br><span class="line"><span class="keyword">parameter</span> DEPTH = <span class="number">2</span>,  <span class="comment">// the number of input/output data</span></span><br><span class="line"><span class="keyword">parameter</span> DELAY = <span class="number">4</span>  <span class="comment">// pipeline depth </span></span><br><span class="line">)(</span><br><span class="line"><span class="keyword">input</span> clk,</span><br><span class="line"><span class="keyword">input</span> rst, <span class="comment">// synchronous reset, active high</span></span><br><span class="line"><span class="keyword">input</span> en,  </span><br><span class="line"><span class="keyword">input</span> [BIT_WIDTH*DEPTH - <span class="number">1</span>:<span class="number">0</span>] dataIn,  <span class="comment">//input data that packed into one array </span></span><br><span class="line"><span class="keyword">output</span> [BIT_WIDTH*DEPTH - <span class="number">1</span>:<span class="number">0</span>] dataOut  <span class="comment">// output data that packed into one array.</span></span><br><span class="line"> </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Hazard-Detection-Unit"><a href="#Hazard-Detection-Unit" class="headerlink" title="Hazard Detection Unit"></a>Hazard Detection Unit</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">USAGE: </span></span><br><span class="line"><span class="comment">1. lw data hazard; </span></span><br><span class="line"><span class="comment">2. Branch Data Hazard</span></span><br><span class="line"><span class="comment">3. Branch Hazard (j, jr, jal, bne, beq),</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">module</span> hazardDetectionUnit (</span><br><span class="line"><span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] IF_ID_Instruction,</span><br><span class="line"><span class="keyword">input</span> ID_EX_MemRead,</span><br><span class="line"><span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] ID_EX_Rt,</span><br><span class="line"><span class="keyword">input</span> equal,</span><br><span class="line"><span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] ID_EX_Rd,</span><br><span class="line"><span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] EX_MEM_Rd,</span><br><span class="line"><span class="keyword">input</span> ID_EX_RegWrite,</span><br><span class="line"><span class="keyword">input</span> EX_MEM_RegWrite,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> PCWrite,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> ID_EX_Flush,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> IF_Flush,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> IF_ID_Hold</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Hazard"><a href="#Hazard" class="headerlink" title="Hazard"></a>Hazard</h2><h3 id="Structural-Memory-hazard"><a href="#Structural-Memory-hazard" class="headerlink" title="Structural(Memory) hazard:"></a><strong>Structural(Memory) hazard</strong>:</h3><p>separate Instruction Memory and Data Memory</p><h3 id="Data-Hazard-only-RAW-can-happen-in-MIPS"><a href="#Data-Hazard-only-RAW-can-happen-in-MIPS" class="headerlink" title="Data Hazard: only RAW can happen in MIPS"></a><strong>Data Hazard</strong>: only RAW can happen in MIPS</h3><h4 id="insert-nops-software"><a href="#insert-nops-software" class="headerlink" title="insert nops (software);"></a>insert nops (software);</h4><h4 id="Forwarding-R-type-hardware"><a href="#Forwarding-R-type-hardware" class="headerlink" title="Forwarding (R_type, hardware);"></a>Forwarding (R_type, hardware);</h4><img src="/2022/03/22/CSC3050-Computer-Architecture/forwarding.png" class=""><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Forwarding Unit</span></span><br><span class="line"><span class="comment">Mux control | Source | Explanation</span></span><br><span class="line"><span class="comment">ForwardA = 00   | ID/EX  | The first ALU operand comes from the register file</span></span><br><span class="line"><span class="comment">ForwardA = 10   | EX/MEM | The first ALU operand is forwarded from the prior ALU result</span></span><br><span class="line"><span class="comment">ForwardA = 01   | MEM/WB | The first ALU operand is forwarded from data memory or an earlier ALU result</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ForwardB = 00   | ID/EX  | The second ALU operand comes from the register file</span></span><br><span class="line"><span class="comment">ForwardB = 01   | EX/MEM | The second ALU operand is forwarded from the prior ALU result</span></span><br><span class="line"><span class="comment">ForwardB = 10   | MEM/WB | The second ALU operand is forwarded from data memory or an earlier ALU result</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Two optimizations</span></span><br><span class="line"><span class="comment">– Do not forward if instruction does not write register</span></span><br><span class="line"><span class="comment">=&gt; check if RegWrite is asserted</span></span><br><span class="line"><span class="comment">– Do not forward if destination register is $0</span></span><br><span class="line"><span class="comment">=&gt; check if RegisterRd = 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">module</span> forwardingUnit(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] ID_EX_Rs,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] ID_EX_Rt,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] EX_MEM_Rd,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] MEM_WB_Rd,</span><br><span class="line">    <span class="keyword">input</span> EX_MEM_RegWrite,</span><br><span class="line">    <span class="keyword">input</span> MEM_WB_RegWrite,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">1</span>:<span class="number">0</span>] ForwardA,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">1</span>:<span class="number">0</span>] ForwardB</span><br><span class="line">);</span><br></pre></td></tr></table></figure><img src="/2022/03/22/CSC3050-Computer-Architecture/detect_data_hazard.png" class=""><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> hazardDetectionUnit (</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] IF_ID_Instruction,</span><br><span class="line">    <span class="keyword">input</span> ID_EX_MemRead,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] ID_EX_Rt,</span><br><span class="line">    <span class="keyword">input</span> equal,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] ID_EX_Rd,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] EX_MEM_Rd,</span><br><span class="line">    <span class="keyword">input</span> ID_EX_RegWrite,</span><br><span class="line">    <span class="keyword">input</span> EX_MEM_RegWrite,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> PCWrite,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> ID_EX_Flush,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> IF_Flush,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> IF_ID_Hold</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="stalls-load-use-hardware"><a href="#stalls-load-use-hardware" class="headerlink" title="stalls (load-use, hardware)"></a>stalls (load-use, hardware)</h4><img src="/2022/03/22/CSC3050-Computer-Architecture/stalling.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (ID/EX.MemRead and ((ID/EX.RegisterRt = IF/ID.RegisterRs) or</span><br><span class="line">        (ID/EX.RegisterRt = IF/ID.registerRt)) )  stall the pipeline for one cycle</span><br><span class="line">/* ID/EX.MemRead=1 indicates a load instruction */ </span><br></pre></td></tr></table></figure><ul><li><p>How to stall?</p><p> – Stall instruction in IF and ID: not change PC and IF/ID<br> =&gt; the stages re-execute the instructions<br> – What to move into EX: insert an NOP by changing EX, MEM, WB control fields of ID/EX pipeline register to 0<br> • All control signals to EX, MEM, WB are deasserted and no registers or memories<br> are written</p></li></ul><h3 id="Branch-hazard"><a href="#Branch-hazard" class="headerlink" title="Branch hazard:"></a>Branch hazard:</h3><img src="/2022/03/22/CSC3050-Computer-Architecture/branch_hazard.png" class="">    <p>Assume branch not taken<br>– Need to add hardware for flushing instruction if wrong<br>– Branch decision made at MEM =&gt; need to flush instruction in IF/ID, ID/EX by changing control values to 0</p><p>The <code>mainController</code> output the <code>BranchBEQ</code> and <code>BranchBNE</code> signals. The<br><code>hazardDetectionUnit</code> is used to handle <strong>BRANCH Hazard</strong> and <strong>BRANCH DATA Hazard</strong>.</p><h2 id="How-register-file-simultaneously-writes-and-reads"><a href="#How-register-file-simultaneously-writes-and-reads" class="headerlink" title="How register file simultaneously writes and reads?"></a>How register file simultaneously writes and reads?</h2><p>The <code>RegisterFile</code> has a sensitive input clk, that is triggered by falling edge. The<br>reason is:<br>Read request of value written in the same cycle occurs in all kind of designs, and is<br>usually handled with bypass logic, whereby the written value is forwarded directly to<br>the read output, without going through the registers. Such bypass is done in a single<br>clock design.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Project-1-MIPS-assembler-simulator&quot;&gt;&lt;a href=&quot;#Project-1-MIPS-assembler-simulator&quot; class=&quot;headerlink&quot; title=&quot;Project 1: MIPS: assembl</summary>
      
    
    
    
    <category term="course" scheme="https://luuvy757.github.io/categories/course/"/>
    
    
  </entry>
  
  <entry>
    <title>FL Algorithms</title>
    <link href="https://luuvy757.github.io/2022/03/09/FL-Algorithms/"/>
    <id>https://luuvy757.github.io/2022/03/09/FL-Algorithms/</id>
    <published>2022-03-09T14:03:03.000Z</published>
    <updated>2022-03-10T15:36:10.946Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Device $i$ has $N_{i}$ training samples: $z_{i,1}, z_{i,2}, …, z_{i,N_{i}}$   </li><li>$f_{i}(w, z_{i,j})$: loss of the model on training sample $z_{i,j}$     </li><li>$F_{i}(w) = \frac{1}{N_{i}} \sum_{j=1}^{N_{i}}f_{i}(w, z_{i,j})$: loss function of device $i$    </li></ul><h2 id="Formula-1-One-Model-Fits-All-Formulation"><a href="#Formula-1-One-Model-Fits-All-Formulation" class="headerlink" title="Formula 1: One-Model-Fits-All Formulation"></a>Formula 1: One-Model-Fits-All Formulation</h2><script type="math/tex; mode=display">minimize_{w} \sum_{i=1}^{n}\alpha_{i}F_{i}(w)</script><p>Common practice: $\alpha_{i} = \frac{N_{i}}{N}, N=\sum_{k=1}^{n} N_{k}$:</p><script type="math/tex; mode=display">minimize_{w}\frac{1}{N}\sum_{i=1}^{n}\sum_{j=1}^{N_{i}}f_{i}(w, z_{i,j})</script><p>(Less effective and even undesirable)</p><h2 id="Formula-2-Full-personalized-model"><a href="#Formula-2-Full-personalized-model" class="headerlink" title="Formula 2: Full personalized model"></a>Formula 2: Full personalized model</h2><script type="math/tex; mode=display">minimize_{w_{0}, \{w_{i}\}_{i=1}^{n}} \sum_{i=1}^{n}\alpha_{i}(F_{i}(w_{i} + \frac{\lambda_{i}}{2}||w_{i}-w_{0}||^{2}))</script><ul><li>$w_{i}$: personalized model parameters.</li><li>$\lambda_{i}$: regularization weights.</li><li>$w_{0}$: reference model maintained by server.</li></ul><p>(Full model personalization: $w_{i}, w_{0}$, <strong>memory cost</strong>)</p><h2 id="Formula-3-Partial-personalized-model"><a href="#Formula-3-Partial-personalized-model" class="headerlink" title="Formula 3: Partial personalized model"></a>Formula 3: Partial personalized model</h2><ul><li>model parameters on device $i$: $w_{i} = (u,v_{i})$</li><li>$u$: shared parameters $u \in R^{d_{0}}$</li><li>$v_{i}$: personalized parameters $v_{i} \in R^{d_{i}}$</li></ul><script type="math/tex; mode=display">minimize_{u, \{v_{i}\}_{i=1}^{n}}\sum_{i=1}^{n}\alpha_{i}F_{i}(u,v_{i})</script><p><strong>Problems</strong>: different  of</p><ul><li>$\dim v_{i}$ </li><li>Number of parameters </li><li>Architecture </li></ul><p><strong>Solution</strong>: <em>FedSim, FedAlt</em></p><h2 id="Standard-FL-protocol"><a href="#Standard-FL-protocol" class="headerlink" title="Standard FL protocol:"></a>Standard FL protocol:</h2><img src="/2022/03/09/FL-Algorithms/FL_standard.png" class=""><ol><li>During each round, the <strong>server</strong> <em>randomly</em> selects a subset of the devices for <strong>update and broadcasts</strong> the current global version of the <strong>shared parameters</strong> to devices in the subset. </li><li>Each <strong>selected device</strong> then<br>performs one or more steps of (stochastic) gradient descent to <strong>update both the shared parameters and the personal parameters</strong>, and <strong>sends the updated shared parameters to the server</strong> for aggregation.</li><li>The <strong>updated personal parameters</strong> are kept local at the device to serve as the initial states when the device is selected for another update. <h2 id="FedSim-FedAlt"><a href="#FedSim-FedAlt" class="headerlink" title="FedSim, FedAlt"></a><em>FedSim, FedAlt</em></h2><img src="/2022/03/09/FL-Algorithms/FedSim_FedAlt.png" class=""></li></ol><ul><li><p>In <em>FedSim</em>, the <strong>shared and personal parameters</strong> are <strong>updated simultaneously</strong> during each local iteration.</p></li><li><p>In <em>FedAlt</em>, the devices <strong>first update the personal parameters</strong> with the received shared parameters fixed and <strong>then update the shared parameters</strong> with the new personal parameters fixed.</p></li></ul><h2 id="FedAvg"><a href="#FedAvg" class="headerlink" title="FedAvg"></a><em>FedAvg</em></h2><img src="/2022/03/09/FL-Algorithms/FedAvg_Algorithm.png" class=""><blockquote><p>Add Computation to decrease communication     </p><p><strong>Computation controlled by</strong></p><ul><li>C: fraction of clients that perform computation on each round</li><li>E: local epochs</li><li>B: local minibatch size. $\infty$: full local dataset is a single batch.</li></ul></blockquote><p>Client $k$ with $n_{k}$ local samples, local updates per round is $u_{k} = E \frac{n_{k}}{B}$</p><p>Adding Local Computation: decrease B or increase E, or both.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Device $i$ has $N_{i}$ training samples: $z_{i,1}, z_{i,2}, …, z_{i,N_{i}}$   &lt;/li&gt;
&lt;li&gt;$f_{i}(w, z_{i,j})$: loss of the model on t</summary>
      
    
    
    
    <category term="FL" scheme="https://luuvy757.github.io/categories/FL/"/>
    
    
  </entry>
  
  <entry>
    <title>FL using Flower on device</title>
    <link href="https://luuvy757.github.io/2022/01/21/FL-using-Flower-on-device/"/>
    <id>https://luuvy757.github.io/2022/01/21/FL-using-Flower-on-device/</id>
    <published>2022-01-21T04:59:06.000Z</published>
    <updated>2022-03-22T06:32:18.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><a href="/2022/01/23/FL-using-Flower-on-device/About-Flower/" title="About Flower">About Flower</a></h2><h2 id="Flower-Android"><a href="#Flower-Android" class="headerlink" title="Flower + Android"></a>Flower + Android</h2><img src="/2022/01/21/FL-using-Flower-on-device/flwr-android.png" class="" title="Overview"><h3 id="Run-Federated-Learning-on-Android-Devices-TF-Lite-Flower"><a href="#Run-Federated-Learning-on-Android-Devices-TF-Lite-Flower" class="headerlink" title="Run Federated Learning on Android Devices (TF Lite + Flower)"></a>Run Federated Learning on Android Devices (TF Lite + Flower)</h3><p><a href="https://flower.dev/blog/2021-12-15-federated-learning-on-android-devices-with-flower">Tutorial blog</a><br><a href="https://github.com/adap/flower/tree/main/examples/android">Github: Flower Android Example (TensorFlowLite)</a></p><ol><li><p><strong>Setup the model definitions</strong></p><blockquote><p>tflite_convertor/convert_to_tflite.py<br><a href="#FL-Model-Personalization">TF Model Personalization</a> requires defining two architectures:      </p></blockquote><ul><li><strong>Base Model</strong> <ul><li>A pre-trained feature extractor (e.g., ResNet50 trained on ImageNet) which is not updated during on-device training.</li></ul></li><li><p><strong>Head Model</strong> </p><ul><li>Like a task-specific classifer which is randomly initialized and trained on the local data.</li></ul></li><li><p>Both Models can be configured in <strong>tflite_convertor/convert_to_tflite.py</strong>, and converted into “tflite_model”</p></li></ul></li></ol><ol><li><p><strong>Android Client</strong> </p><blockquote><p><code>client</code> folder  </p></blockquote><ul><li><strong>Modifying App’s Interface and Functionalities</strong><br>flwr/android_client/MainActivity.java<br><code>loadData</code>, <code>connect</code>, <code>runGRCP</code></li><li><p><strong>Modifying Flower Client</strong><br>flwr/android_client/FlowerClient.java<br><strong>LoadData</strong> (Also, checking: src/main/assets/data,<br>  flwr/android_client/TransferLearningModelWrapper.java)<br><strong>Loss Callback</strong>          </p></li><li><p><strong>Add tflite_model</strong><br>src/main/assets/model<br>build.gradle(Module: client.app)</p></li></ul></li><li><p><strong>Server</strong></p><blockquote><p>server.py</p></blockquote><p>Usage: <code>Strategy</code> configuration</p><p>More about Strategy: <a href="https://flower.dev/docs/strategies.html">https://flower.dev/docs/strategies.html</a></p></li><li><p>Log</p><ul><li><p>Server Log</p><img src="/2022/01/21/FL-using-Flower-on-device/demo-server-log.png" class=""></li><li><p>Client Log (Two devices: Huawei Honor (Android 9) and Huawei M6 (Android 10))</p><img src="/2022/01/21/FL-using-Flower-on-device/demo-device-log.jpg" class=""></li></ul></li></ol><h2 id="Flower-Embedded"><a href="#Flower-Embedded" class="headerlink" title="Flower + Embedded"></a>Flower + Embedded</h2><img src="/2022/01/21/FL-using-Flower-on-device/flwr-embedded.png" class="" title="Overview"><hr><h2 id="FL-Model-Personalization"><a href="#FL-Model-Personalization" class="headerlink" title="FL Model Personalization"></a>FL Model Personalization</h2><p><a href="https://github.com/tensorflow/examples/tree/master/lite/examples/model_personalization">TensorFlow Lite Example On-device Model Personalization</a></p><h3 id="Prepare-the-TfLite-model"><a href="#Prepare-the-TfLite-model" class="headerlink" title="Prepare the TfLite model"></a>Prepare the TfLite model</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/model_personalization</span><br><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── android</span><br><span class="line">├── app_screenshot.png</span><br><span class="line">└── transfer_learning</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># under /transfer_learning </span></span><br><span class="line"><span class="comment"># Generate the model flatbuffer file `model.tflite`</span></span><br><span class="line">python generate_training_model.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># under /model_personalization</span></span><br><span class="line"><span class="comment"># Copy over the flatbuffer file to the `android` assets directory.</span></span><br><span class="line">cp transfer_learning/model.tflite android/app/src/main/assets/model/model.tflite</span><br></pre></td></tr></table></figure><h3 id="Install-and-run-the-application-on-Device"><a href="#Install-and-run-the-application-on-Device" class="headerlink" title="Install and run the application on Device"></a>Install and run the application on Device</h3><ol><li><p>Open Android Studio and import the project (the <code>/android</code> folder)</p><img src="/2022/01/21/FL-using-Flower-on-device/android-studio-import-demo.png" class=""></li><li><p>Connect with device and run the code. </p><img src="/2022/01/21/FL-using-Flower-on-device/device-connection.png" class=""></li></ol><h3 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h3><ol><li><p><code>$ python server.py</code> Error: No attribute FedAvgAndroid</p><blockquote><p>Install the latest version of the flower from the github:</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install git+https://github.com/adap/flower.git</span><br></pre></td></tr></table></figure></blockquote></li><li><p>Failed install app: app cannot be installed for “unpublished vision”</p><blockquote><p><code>/android</code> folder, in <code>gradle.properties</code> add <code>android.injected.testOnly=false</code></p></blockquote></li><li><p>USB connection</p><blockquote><p>Open USB developer option on device</p></blockquote></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/2022/01/23/FL-using-Flower-on-device/About-Flower/&quot; title=&quot;About Flower&quot;&gt;Abo</summary>
      
    
    
    
    <category term="FL" scheme="https://luuvy757.github.io/categories/FL/"/>
    
    
  </entry>
  
</feed>
