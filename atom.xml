<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jiaqi&#39;s Blog</title>
  
  
  <link href="https://luuvy757.github.io/atom.xml" rel="self"/>
  
  <link href="https://luuvy757.github.io/"/>
  <updated>2022-03-22T07:49:45.606Z</updated>
  <id>https://luuvy757.github.io/</id>
  
  <author>
    <name>Jiaqi Shao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSC3050 Computer Architecture</title>
    <link href="https://luuvy757.github.io/2022/03/22/CSC3050-Computer-Architecture/"/>
    <id>https://luuvy757.github.io/2022/03/22/CSC3050-Computer-Architecture/</id>
    <published>2022-03-22T05:59:55.000Z</published>
    <updated>2022-03-22T07:49:45.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Project-1-MIPS-assembler-simulator"><a href="#Project-1-MIPS-assembler-simulator" class="headerlink" title="Project 1: MIPS: assembler, simulator."></a>Project 1: MIPS: assembler, simulator.</h2><blockquote><p>Assembler: translate MIPS code to machine code. </p><p>Simulator: execute machine code.</p></blockquote><h3 id="Generic-method"><a href="#Generic-method" class="headerlink" title="Generic method"></a>Generic method</h3><ol><li>Read .asm data and put data into static data segment</li><li>Read .asm text and use assembler to translate them into machine code, then put them into text segment</li><li>Initialize <code>pc = 0x40000000</code>, fetch instructions in text segment which incrementing <code>pc</code>.</li></ol><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem:"></a>Problem:</h3><ol><li>How to put data/text into memory?<br> A: map virtual memory to real memory. </li><li>How to put data with different data type (char, byte, word, half)?<br> A: mapMem -&gt; <em>char, cast `</em>char <code>into</code><em>uint_16_t (half) </em>uint_32_t(word)`. </li><li>How to map <code>labels</code>?<br> A: when reading <code>.asm</code> file, using map data structure to map <code>label</code> and corresponding relative address.</li><li>Jump/Branch?<br>A: Jump <code>j label/address</code>, if label, label-&gt;relative address &gt;&gt; 2, then PC || address||00;<br>Branch <code>bne $s1 $s0 label/offset</code>, label -&gt; relative address =  pc+offset*4 + 4 =&gt; offset; then branch to PC + offset*4 + 4;</li></ol><h2 id="Project-2-ALU-Verilog"><a href="#Project-2-ALU-Verilog" class="headerlink" title="Project 2: ALU Verilog"></a>Project 2: ALU Verilog</h2><blockquote><p>ALU(regA, regB, instruction\control, result, flag(Z,O,N))</p></blockquote><h3 id="Generic-method-1"><a href="#Generic-method-1" class="headerlink" title="Generic method"></a>Generic method</h3><ul><li>Instruction decode =&gt; op code (R type always 0), func code</li><li>ALU module (<strong>always block</strong> with sensitive list)</li><li>Test bench (<strong>initial block</strong> for simulation purpose, delay 10ns for propagation delay)</li><li><code>always block</code> and <code>initial block</code> are independent processes </li></ul><img src="/2022/03/22/CSC3050-Computer-Architecture/verilog_initial_block.png" class=""><h2 id="Project-3-Pipelined-CPU-with-Verilog"><a href="#Project-3-Pipelined-CPU-with-Verilog" class="headerlink" title="Project 3: Pipelined CPU with Verilog"></a>Project 3: Pipelined CPU with Verilog</h2><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><img src="/2022/03/22/CSC3050-Computer-Architecture/datapath_diagram.jpg" class=""><img src="/2022/03/22/CSC3050-Computer-Architecture/mainController.jpg" class=""><h3 id="Generic-method-2"><a href="#Generic-method-2" class="headerlink" title="Generic method"></a>Generic method</h3><h4 id="Data-Path"><a href="#Data-Path" class="headerlink" title="Data Path"></a>Data Path</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">PipelinednDatapath</span></span><br><span class="line"><span class="comment">IF -&gt; ID -&gt; EXE -&gt; MEM -&gt; WB</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">module</span> datapath#(</span><br><span class="line"><span class="keyword">parameter</span> DATA_WIDTH = <span class="number">32</span>,</span><br><span class="line"><span class="keyword">parameter</span> ADDR_WIDTH = <span class="number">5</span></span><br><span class="line">)(</span><br><span class="line"><span class="keyword">input</span> clk,</span><br><span class="line"><span class="keyword">input</span> rst,</span><br><span class="line"><span class="keyword">input</span> en_n</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Main-Controller"><a href="#Main-Controller" class="headerlink" title="Main Controller"></a>Main Controller</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> controlUnit (</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">5</span>:<span class="number">0</span>] op,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">5</span>:<span class="number">0</span>] funct,</span><br><span class="line">    <span class="keyword">output</span>  Jump,</span><br><span class="line">    <span class="keyword">output</span>  RegWrite,  <span class="comment">// control register file -- 1 for write;</span></span><br><span class="line">    <span class="keyword">output</span>  MemtoReg,  <span class="comment">// 1 for data from mem, 0 for data from ALU output</span></span><br><span class="line">    <span class="keyword">output</span>  MemRead,  <span class="comment">// control data memory</span></span><br><span class="line">    <span class="comment">// output  MemWrite,  // control data memory</span></span><br><span class="line">    <span class="keyword">output</span>  BranchBNE,  <span class="comment">// for bne and beq;</span></span><br><span class="line">    <span class="keyword">output</span>  BranchBEQ,</span><br><span class="line">    <span class="keyword">output</span>  ALUSrc, <span class="comment">// 0 for regInput, 1 for immediate input</span></span><br><span class="line">    <span class="keyword">output</span>  [<span class="number">1</span>:<span class="number">0</span>] RegDst,  <span class="comment">// 0 for rt, 1 for rd (R type), 2 for reg31 (jal)</span></span><br><span class="line">    <span class="keyword">output</span>  isSigned,</span><br><span class="line">    <span class="keyword">output</span>  JumpRegID,  <span class="comment">// for jr: jump to address stored in a register</span></span><br><span class="line">    <span class="keyword">output</span>  RegWriteSrc, <span class="comment">// 0: data from DMEM; 1: PC + 4;</span></span><br><span class="line">    <span class="keyword">output</span>  [<span class="number">2</span>:<span class="number">0</span>] ALUop  <span class="comment">// input to ALU control unit</span></span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="ALU-controller"><a href="#ALU-controller" class="headerlink" title="ALU controller"></a>ALU controller</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> ALUcontrol (</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] ALUop,  <span class="comment">// from the main controller</span></span><br><span class="line">    <span class="keyword">input</span> [<span class="number">5</span>:<span class="number">0</span>] funct,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">3</span>:<span class="number">0</span>] control,</span><br><span class="line"><span class="keyword">output</span> jump_signal</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="ALU"><a href="#ALU" class="headerlink" title="ALU"></a>ALU</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> alu #(</span><br><span class="line">    <span class="keyword">parameter</span> DELAY = <span class="number">0</span></span><br><span class="line">)(</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> rst,</span><br><span class="line">    <span class="keyword">input</span> enable,  <span class="comment">// for delay enable, active high</span></span><br><span class="line">    <span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>] control,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] A,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] B,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] shamt,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">31</span>: <span class="number">0</span>] result,</span><br><span class="line">    <span class="keyword">output</span> Zero,</span><br><span class="line">    <span class="keyword">output</span> Overflow,</span><br><span class="line">    <span class="keyword">output</span> Signbit,</span><br><span class="line">    <span class="keyword">output</span> Carrybit</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="Register-File"><a href="#Register-File" class="headerlink" title="Register File"></a>Register File</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> RegisterFile (</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> rst,</span><br><span class="line">    <span class="keyword">input</span> RegWrite,  <span class="comment">// register write signal</span></span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] readReg1,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] readReg2,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] writeReg,   <span class="comment">// indicating which the register to write to.</span></span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] writeData,  </span><br><span class="line">    <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] readData1,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] readData2</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="Data-Memory"><a href="#Data-Memory" class="headerlink" title="Data Memory"></a>Data Memory</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> MainMemory</span><br><span class="line">    ( <span class="comment">// Inputs</span></span><br><span class="line">      <span class="keyword">input</span>  CLOCK <span class="comment">// clock</span></span><br><span class="line">    , <span class="keyword">input</span>  RESET <span class="comment">// reset</span></span><br><span class="line">    , <span class="keyword">input</span>  MEMWRITE <span class="comment">// write signal</span></span><br><span class="line">    , <span class="keyword">input</span>  MEMREAD <span class="comment">// read signal</span></span><br><span class="line">    , <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] ADDRESS</span><br><span class="line">    , <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] WRITE_DATA <span class="comment">// write data</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Outputs</span></span><br><span class="line">    , <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] READDATA  <span class="comment">// output readData</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h4 id="sign-extender"><a href="#sign-extender" class="headerlink" title="sign extender"></a>sign extender</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> signextender #(</span><br><span class="line"><span class="keyword">parameter</span> DELAY = <span class="number">0</span></span><br><span class="line">)(</span><br><span class="line"><span class="keyword">input</span> [<span class="number">15</span>:<span class="number">0</span>] dataIn,</span><br><span class="line"><span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] dataOut,</span><br><span class="line"><span class="keyword">input</span> isSigned,  <span class="comment">// extend 1 or 0;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Delay Inputs</span></span><br><span class="line"><span class="keyword">input</span> clk,</span><br><span class="line"><span class="keyword">input</span> rst,</span><br><span class="line"><span class="keyword">input</span> en</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="mux"><a href="#mux" class="headerlink" title="mux"></a>mux</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** ---MUX---- **/</span></span><br><span class="line"><span class="comment">// n inputs to 1 output</span></span><br><span class="line"><span class="comment">// the inputs is depended on the select signal</span></span><br><span class="line"><span class="keyword">module</span> MUX #(</span><br><span class="line"><span class="keyword">parameter</span> DATA_INPUT_WIDTH = <span class="number">5</span>,  <span class="comment">// the input data width</span></span><br><span class="line"><span class="keyword">parameter</span> DATA_INPUT_NUM= <span class="number">2</span>,  <span class="comment">// the number of input data</span></span><br><span class="line"><span class="keyword">parameter</span> SEL_BIT_WIDTH = <span class="number">1</span>  <span class="comment">// the input signal data width, if there is n input datas, the select input data width is log2(n) bits.</span></span><br><span class="line">)(</span><br><span class="line"><span class="keyword">input</span> [DATA_INPUT_WIDTH*DATA_INPUT_NUM- <span class="number">1</span>:<span class="number">0</span>] dataIn,  <span class="comment">// n inputs packed into an array</span></span><br><span class="line"><span class="keyword">input</span> [SEL_BIT_WIDTH - <span class="number">1</span>:<span class="number">0</span>] sel,  </span><br><span class="line"><span class="keyword">output</span> [DATA_INPUT_WIDTH - <span class="number">1</span>:<span class="number">0</span>] dataOut</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="pipe-register"><a href="#pipe-register" class="headerlink" title="pipe register"></a>pipe register</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* delay</span></span><br><span class="line"><span class="comment"> * This creates an array or vector registers of generic bitwidth, array width, and pipeline depth. </span></span><br><span class="line"><span class="comment"> *  Pipe shifts makes delay</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> delay #(</span><br><span class="line"><span class="keyword">parameter</span> BIT_WIDTH = <span class="number">32</span>,</span><br><span class="line"><span class="keyword">parameter</span> DEPTH = <span class="number">2</span>,  <span class="comment">// the number of input/output data</span></span><br><span class="line"><span class="keyword">parameter</span> DELAY = <span class="number">4</span>  <span class="comment">// pipeline depth </span></span><br><span class="line">)(</span><br><span class="line"><span class="keyword">input</span> clk,</span><br><span class="line"><span class="keyword">input</span> rst, <span class="comment">// synchronous reset, active high</span></span><br><span class="line"><span class="keyword">input</span> en,  </span><br><span class="line"><span class="keyword">input</span> [BIT_WIDTH*DEPTH - <span class="number">1</span>:<span class="number">0</span>] dataIn,  <span class="comment">//input data that packed into one array </span></span><br><span class="line"><span class="keyword">output</span> [BIT_WIDTH*DEPTH - <span class="number">1</span>:<span class="number">0</span>] dataOut  <span class="comment">// output data that packed into one array.</span></span><br><span class="line"> </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="Hazard-Detection-Unit"><a href="#Hazard-Detection-Unit" class="headerlink" title="Hazard Detection Unit"></a>Hazard Detection Unit</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">USAGE: </span></span><br><span class="line"><span class="comment">1. lw data hazard; </span></span><br><span class="line"><span class="comment">2. Branch Data Hazard</span></span><br><span class="line"><span class="comment">3. Branch Hazard (j, jr, jal, bne, beq),</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">module</span> hazardDetectionUnit (</span><br><span class="line"><span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] IF_ID_Instruction,</span><br><span class="line"><span class="keyword">input</span> ID_EX_MemRead,</span><br><span class="line"><span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] ID_EX_Rt,</span><br><span class="line"><span class="keyword">input</span> equal,</span><br><span class="line"><span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] ID_EX_Rd,</span><br><span class="line"><span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] EX_MEM_Rd,</span><br><span class="line"><span class="keyword">input</span> ID_EX_RegWrite,</span><br><span class="line"><span class="keyword">input</span> EX_MEM_RegWrite,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> PCWrite,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> ID_EX_Flush,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> IF_Flush,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> IF_ID_Hold</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Hazard"><a href="#Hazard" class="headerlink" title="Hazard"></a>Hazard</h3><h4 id="Structural-Memory-hazard"><a href="#Structural-Memory-hazard" class="headerlink" title="Structural(Memory) hazard:"></a><strong>Structural(Memory) hazard</strong>:</h4><p>separate Instruction Memory and Data Memory</p><h4 id="Data-Hazard-only-RAW-can-happen-in-MIPS"><a href="#Data-Hazard-only-RAW-can-happen-in-MIPS" class="headerlink" title="Data Hazard: only RAW can happen in MIPS"></a><strong>Data Hazard</strong>: only RAW can happen in MIPS</h4><h5 id="insert-nops-software"><a href="#insert-nops-software" class="headerlink" title="insert nops (software);"></a>insert nops (software);</h5><h5 id="Forwarding-R-type-hardware"><a href="#Forwarding-R-type-hardware" class="headerlink" title="Forwarding (R_type, hardware);"></a>Forwarding (R_type, hardware);</h5><img src="/2022/03/22/CSC3050-Computer-Architecture/forwarding.png" class=""><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Forwarding Unit</span></span><br><span class="line"><span class="comment">Mux control | Source | Explanation</span></span><br><span class="line"><span class="comment">ForwardA = 00   | ID/EX  | The first ALU operand comes from the register file</span></span><br><span class="line"><span class="comment">ForwardA = 10   | EX/MEM | The first ALU operand is forwarded from the prior ALU result</span></span><br><span class="line"><span class="comment">ForwardA = 01   | MEM/WB | The first ALU operand is forwarded from data memory or an earlier ALU result</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ForwardB = 00   | ID/EX  | The second ALU operand comes from the register file</span></span><br><span class="line"><span class="comment">ForwardB = 01   | EX/MEM | The second ALU operand is forwarded from the prior ALU result</span></span><br><span class="line"><span class="comment">ForwardB = 10   | MEM/WB | The second ALU operand is forwarded from data memory or an earlier ALU result</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Two optimizations</span></span><br><span class="line"><span class="comment">– Do not forward if instruction does not write register</span></span><br><span class="line"><span class="comment">=&gt; check if RegWrite is asserted</span></span><br><span class="line"><span class="comment">– Do not forward if destination register is $0</span></span><br><span class="line"><span class="comment">=&gt; check if RegisterRd = 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">module</span> forwardingUnit(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] ID_EX_Rs,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] ID_EX_Rt,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] EX_MEM_Rd,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] MEM_WB_Rd,</span><br><span class="line">    <span class="keyword">input</span> EX_MEM_RegWrite,</span><br><span class="line">    <span class="keyword">input</span> MEM_WB_RegWrite,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">1</span>:<span class="number">0</span>] ForwardA,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">1</span>:<span class="number">0</span>] ForwardB</span><br><span class="line">);</span><br></pre></td></tr></table></figure><img src="/2022/03/22/CSC3050-Computer-Architecture/detect_data_hazard.png" class=""><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> hazardDetectionUnit (</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] IF_ID_Instruction,</span><br><span class="line">    <span class="keyword">input</span> ID_EX_MemRead,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] ID_EX_Rt,</span><br><span class="line">    <span class="keyword">input</span> equal,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] ID_EX_Rd,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] EX_MEM_Rd,</span><br><span class="line">    <span class="keyword">input</span> ID_EX_RegWrite,</span><br><span class="line">    <span class="keyword">input</span> EX_MEM_RegWrite,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> PCWrite,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> ID_EX_Flush,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> IF_Flush,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> IF_ID_Hold</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="stalls-load-use-hardware"><a href="#stalls-load-use-hardware" class="headerlink" title="stalls (load-use, hardware)"></a>stalls (load-use, hardware)</h5><img src="/2022/03/22/CSC3050-Computer-Architecture/stalling.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (ID/EX.MemRead and ((ID/EX.RegisterRt = IF/ID.RegisterRs) or</span><br><span class="line">        (ID/EX.RegisterRt = IF/ID.registerRt)) )  stall the pipeline for one cycle</span><br><span class="line">/* ID/EX.MemRead=1 indicates a load instruction */ </span><br></pre></td></tr></table></figure><ul><li><p>How to stall?</p><p> – Stall instruction in IF and ID: not change PC and IF/ID<br> =&gt; the stages re-execute the instructions<br> – What to move into EX: insert an NOP by changing EX, MEM, WB control fields of ID/EX pipeline register to 0<br> • All control signals to EX, MEM, WB are deasserted and no registers or memories<br> are written</p></li></ul><h5 id="Branch-hazard"><a href="#Branch-hazard" class="headerlink" title="Branch hazard:"></a>Branch hazard:</h5><img src="/2022/03/22/CSC3050-Computer-Architecture/branch_hazard.png" class="">    <p>Assume branch not taken<br>– Need to add hardware for flushing instruction if wrong<br>– Branch decision made at MEM =&gt; need to flush instruction in IF/ID, ID/EX by changing control values to 0</p><p>The <code>mainController</code> output the <code>BranchBEQ</code> and <code>BranchBNE</code> signals. The<br><code>hazardDetectionUnit</code> is used to handle <strong>BRANCH Hazard</strong> and <strong>BRANCH DATA Hazard</strong>.</p><h4 id="How-register-file-simultaneously-writes-and-reads"><a href="#How-register-file-simultaneously-writes-and-reads" class="headerlink" title="How register file simultaneously writes and reads?"></a>How register file simultaneously writes and reads?</h4><p>The <code>RegisterFile</code> has a sensitive input clk, that is triggered by falling edge. The<br>reason is:<br>Read request of value written in the same cycle occurs in all kind of designs, and is<br>usually handled with bypass logic, whereby the written value is forwarded directly to<br>the read output, without going through the registers. Such bypass is done in a single<br>clock design.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Project-1-MIPS-assembler-simulator&quot;&gt;&lt;a href=&quot;#Project-1-MIPS-assembler-simulator&quot; class=&quot;headerlink&quot; title=&quot;Project 1: MIPS: assembl</summary>
      
    
    
    
    <category term="Course" scheme="https://luuvy757.github.io/categories/Course/"/>
    
    
  </entry>
  
  <entry>
    <title>FL Algorithms</title>
    <link href="https://luuvy757.github.io/2022/03/09/FL-Algorithms/"/>
    <id>https://luuvy757.github.io/2022/03/09/FL-Algorithms/</id>
    <published>2022-03-09T14:03:03.000Z</published>
    <updated>2022-03-10T15:36:10.946Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Device $i$ has $N_{i}$ training samples: $z_{i,1}, z_{i,2}, …, z_{i,N_{i}}$   </li><li>$f_{i}(w, z_{i,j})$: loss of the model on training sample $z_{i,j}$     </li><li>$F_{i}(w) = \frac{1}{N_{i}} \sum_{j=1}^{N_{i}}f_{i}(w, z_{i,j})$: loss function of device $i$    </li></ul><h2 id="Formula-1-One-Model-Fits-All-Formulation"><a href="#Formula-1-One-Model-Fits-All-Formulation" class="headerlink" title="Formula 1: One-Model-Fits-All Formulation"></a>Formula 1: One-Model-Fits-All Formulation</h2><script type="math/tex; mode=display">minimize_{w} \sum_{i=1}^{n}\alpha_{i}F_{i}(w)</script><p>Common practice: $\alpha_{i} = \frac{N_{i}}{N}, N=\sum_{k=1}^{n} N_{k}$:</p><script type="math/tex; mode=display">minimize_{w}\frac{1}{N}\sum_{i=1}^{n}\sum_{j=1}^{N_{i}}f_{i}(w, z_{i,j})</script><p>(Less effective and even undesirable)</p><h2 id="Formula-2-Full-personalized-model"><a href="#Formula-2-Full-personalized-model" class="headerlink" title="Formula 2: Full personalized model"></a>Formula 2: Full personalized model</h2><script type="math/tex; mode=display">minimize_{w_{0}, \{w_{i}\}_{i=1}^{n}} \sum_{i=1}^{n}\alpha_{i}(F_{i}(w_{i} + \frac{\lambda_{i}}{2}||w_{i}-w_{0}||^{2}))</script><ul><li>$w_{i}$: personalized model parameters.</li><li>$\lambda_{i}$: regularization weights.</li><li>$w_{0}$: reference model maintained by server.</li></ul><p>(Full model personalization: $w_{i}, w_{0}$, <strong>memory cost</strong>)</p><h2 id="Formula-3-Partial-personalized-model"><a href="#Formula-3-Partial-personalized-model" class="headerlink" title="Formula 3: Partial personalized model"></a>Formula 3: Partial personalized model</h2><ul><li>model parameters on device $i$: $w_{i} = (u,v_{i})$</li><li>$u$: shared parameters $u \in R^{d_{0}}$</li><li>$v_{i}$: personalized parameters $v_{i} \in R^{d_{i}}$</li></ul><script type="math/tex; mode=display">minimize_{u, \{v_{i}\}_{i=1}^{n}}\sum_{i=1}^{n}\alpha_{i}F_{i}(u,v_{i})</script><p><strong>Problems</strong>: different  of</p><ul><li>$\dim v_{i}$ </li><li>Number of parameters </li><li>Architecture </li></ul><p><strong>Solution</strong>: <em>FedSim, FedAlt</em></p><h2 id="Standard-FL-protocol"><a href="#Standard-FL-protocol" class="headerlink" title="Standard FL protocol:"></a>Standard FL protocol:</h2><img src="/2022/03/09/FL-Algorithms/FL_standard.png" class=""><ol><li>During each round, the <strong>server</strong> <em>randomly</em> selects a subset of the devices for <strong>update and broadcasts</strong> the current global version of the <strong>shared parameters</strong> to devices in the subset. </li><li>Each <strong>selected device</strong> then<br>performs one or more steps of (stochastic) gradient descent to <strong>update both the shared parameters and the personal parameters</strong>, and <strong>sends the updated shared parameters to the server</strong> for aggregation.</li><li>The <strong>updated personal parameters</strong> are kept local at the device to serve as the initial states when the device is selected for another update. <h2 id="FedSim-FedAlt"><a href="#FedSim-FedAlt" class="headerlink" title="FedSim, FedAlt"></a><em>FedSim, FedAlt</em></h2><img src="/2022/03/09/FL-Algorithms/FedSim_FedAlt.png" class=""></li></ol><ul><li><p>In <em>FedSim</em>, the <strong>shared and personal parameters</strong> are <strong>updated simultaneously</strong> during each local iteration.</p></li><li><p>In <em>FedAlt</em>, the devices <strong>first update the personal parameters</strong> with the received shared parameters fixed and <strong>then update the shared parameters</strong> with the new personal parameters fixed.</p></li></ul><h2 id="FedAvg"><a href="#FedAvg" class="headerlink" title="FedAvg"></a><em>FedAvg</em></h2><img src="/2022/03/09/FL-Algorithms/FedAvg_Algorithm.png" class=""><blockquote><p>Add Computation to decrease communication     </p><p><strong>Computation controlled by</strong></p><ul><li>C: fraction of clients that perform computation on each round</li><li>E: local epochs</li><li>B: local minibatch size. $\infty$: full local dataset is a single batch.</li></ul></blockquote><p>Client $k$ with $n_{k}$ local samples, local updates per round is $u_{k} = E \frac{n_{k}}{B}$</p><p>Adding Local Computation: decrease B or increase E, or both.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Device $i$ has $N_{i}$ training samples: $z_{i,1}, z_{i,2}, …, z_{i,N_{i}}$   &lt;/li&gt;
&lt;li&gt;$f_{i}(w, z_{i,j})$: loss of the model on t</summary>
      
    
    
    
    <category term="FL" scheme="https://luuvy757.github.io/categories/FL/"/>
    
    
  </entry>
  
  <entry>
    <title>FL using Flower on device</title>
    <link href="https://luuvy757.github.io/2022/01/21/FL-using-Flower-on-device/"/>
    <id>https://luuvy757.github.io/2022/01/21/FL-using-Flower-on-device/</id>
    <published>2022-01-21T04:59:06.000Z</published>
    <updated>2022-03-22T06:32:18.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><a href="/2022/01/23/FL-using-Flower-on-device/About-Flower/" title="About Flower">About Flower</a></h2><h2 id="Flower-Android"><a href="#Flower-Android" class="headerlink" title="Flower + Android"></a>Flower + Android</h2><img src="/2022/01/21/FL-using-Flower-on-device/flwr-android.png" class="" title="Overview"><h3 id="Run-Federated-Learning-on-Android-Devices-TF-Lite-Flower"><a href="#Run-Federated-Learning-on-Android-Devices-TF-Lite-Flower" class="headerlink" title="Run Federated Learning on Android Devices (TF Lite + Flower)"></a>Run Federated Learning on Android Devices (TF Lite + Flower)</h3><p><a href="https://flower.dev/blog/2021-12-15-federated-learning-on-android-devices-with-flower">Tutorial blog</a><br><a href="https://github.com/adap/flower/tree/main/examples/android">Github: Flower Android Example (TensorFlowLite)</a></p><ol><li><p><strong>Setup the model definitions</strong></p><blockquote><p>tflite_convertor/convert_to_tflite.py<br><a href="#FL-Model-Personalization">TF Model Personalization</a> requires defining two architectures:      </p></blockquote><ul><li><strong>Base Model</strong> <ul><li>A pre-trained feature extractor (e.g., ResNet50 trained on ImageNet) which is not updated during on-device training.</li></ul></li><li><p><strong>Head Model</strong> </p><ul><li>Like a task-specific classifer which is randomly initialized and trained on the local data.</li></ul></li><li><p>Both Models can be configured in <strong>tflite_convertor/convert_to_tflite.py</strong>, and converted into “tflite_model”</p></li></ul></li></ol><ol><li><p><strong>Android Client</strong> </p><blockquote><p><code>client</code> folder  </p></blockquote><ul><li><strong>Modifying App’s Interface and Functionalities</strong><br>flwr/android_client/MainActivity.java<br><code>loadData</code>, <code>connect</code>, <code>runGRCP</code></li><li><p><strong>Modifying Flower Client</strong><br>flwr/android_client/FlowerClient.java<br><strong>LoadData</strong> (Also, checking: src/main/assets/data,<br>  flwr/android_client/TransferLearningModelWrapper.java)<br><strong>Loss Callback</strong>          </p></li><li><p><strong>Add tflite_model</strong><br>src/main/assets/model<br>build.gradle(Module: client.app)</p></li></ul></li><li><p><strong>Server</strong></p><blockquote><p>server.py</p></blockquote><p>Usage: <code>Strategy</code> configuration</p><p>More about Strategy: <a href="https://flower.dev/docs/strategies.html">https://flower.dev/docs/strategies.html</a></p></li><li><p>Log</p><ul><li><p>Server Log</p><img src="/2022/01/21/FL-using-Flower-on-device/demo-server-log.png" class=""></li><li><p>Client Log (Two devices: Huawei Honor (Android 9) and Huawei M6 (Android 10))</p><img src="/2022/01/21/FL-using-Flower-on-device/demo-device-log.jpg" class=""></li></ul></li></ol><h2 id="Flower-Embedded"><a href="#Flower-Embedded" class="headerlink" title="Flower + Embedded"></a>Flower + Embedded</h2><img src="/2022/01/21/FL-using-Flower-on-device/flwr-embedded.png" class="" title="Overview"><hr><h2 id="FL-Model-Personalization"><a href="#FL-Model-Personalization" class="headerlink" title="FL Model Personalization"></a>FL Model Personalization</h2><p><a href="https://github.com/tensorflow/examples/tree/master/lite/examples/model_personalization">TensorFlow Lite Example On-device Model Personalization</a></p><h3 id="Prepare-the-TfLite-model"><a href="#Prepare-the-TfLite-model" class="headerlink" title="Prepare the TfLite model"></a>Prepare the TfLite model</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/model_personalization</span><br><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── android</span><br><span class="line">├── app_screenshot.png</span><br><span class="line">└── transfer_learning</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># under /transfer_learning </span></span><br><span class="line"><span class="comment"># Generate the model flatbuffer file `model.tflite`</span></span><br><span class="line">python generate_training_model.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># under /model_personalization</span></span><br><span class="line"><span class="comment"># Copy over the flatbuffer file to the `android` assets directory.</span></span><br><span class="line">cp transfer_learning/model.tflite android/app/src/main/assets/model/model.tflite</span><br></pre></td></tr></table></figure><h3 id="Install-and-run-the-application-on-Device"><a href="#Install-and-run-the-application-on-Device" class="headerlink" title="Install and run the application on Device"></a>Install and run the application on Device</h3><ol><li><p>Open Android Studio and import the project (the <code>/android</code> folder)</p><img src="/2022/01/21/FL-using-Flower-on-device/android-studio-import-demo.png" class=""></li><li><p>Connect with device and run the code. </p><img src="/2022/01/21/FL-using-Flower-on-device/device-connection.png" class=""></li></ol><h3 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h3><ol><li><p><code>$ python server.py</code> Error: No attribute FedAvgAndroid</p><blockquote><p>Install the latest version of the flower from the github:</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install git+https://github.com/adap/flower.git</span><br></pre></td></tr></table></figure></blockquote></li><li><p>Failed install app: app cannot be installed for “unpublished vision”</p><blockquote><p><code>/android</code> folder, in <code>gradle.properties</code> add <code>android.injected.testOnly=false</code></p></blockquote></li><li><p>USB connection</p><blockquote><p>Open USB developer option on device</p></blockquote></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/2022/01/23/FL-using-Flower-on-device/About-Flower/&quot; title=&quot;About Flower&quot;&gt;Abo</summary>
      
    
    
    
    <category term="FL" scheme="https://luuvy757.github.io/categories/FL/"/>
    
    
  </entry>
  
</feed>
